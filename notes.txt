Angular 5



Ch 1

What is it:
JS Framework that allows to create reactive SPAs

Angular Versions:
1 and 2 totally different
2 =~ 4 =~ 5

Setup:
download node.js

E:\setup\repositories\programming\angular2>npm install -g @angular/cli

E:\setup\repositories\programming\angular2>ng new my-first-app

cd my-first-app

ng serve

localhost:4200



01 Getting Started
-------------------

C1
*.ts extensions for typescript

C2
direct response, in js we'd require setting up listeners
-------------------


Contents:

Components: Angular Apps are built from Components
Data Binding

Directives: i.e. ng-model: 2-way data binding
in-built and custom directives

Services & Dependency Injection:
Communication between modules

Routing:
management of different URLs

Observables:
Concept allow to work with Asynchronous code

Forms Handling:

Pipes:
To transform output 

http:

Authentication:

Optimizations:

Deployment:

Animations and Testing:




Installing Bootstrap:
also edit angular-cli.json
npm install --save bootstrap






02 The Basics
-------------------

What happens when visiting that page in browser

Editing the content of app.component.html will be reflected on application homepage but it is not the main page
main page (#SPA) is index.html

Components:
A simple class, a typescript class, so that angular is able to instantiate instantiate

Checkout main.ts, application starts from there

Multiple componenets: So that logic can be replicated from the other one



Creating a component:
Previous example: AppComponent, which was the root component, kinda main one

custom component: server(new sub directory)
nameOfComponent.component.ts
server.component.ts


Angular doesn't have all information it requires, add something which tells angular that this is not a normal typescript class but something special, a component, so Decorator.


Decorators: A typescript feature which allow you to enhance class, elements. ex. @Component (@ sign)


Once you've created new component, register it, inside app.module.ts

Angular uses,
Components: To build webpages
Modules: to bundle different pieces of components into packages


Creating components using CLI & Nesting Components
ng generate component servers
ng g c servers

Nesting components:
Add newly created component inside the parent component or vice versa
Also ensure parent one is registered in the mail app.component.ts file

Check the same in F12


Instead of using external templates for styling we can use inline as well #template instead of #templateUrl



Component Styles:
add bootstrap classes and use em in app.component.html

app.component.css:
