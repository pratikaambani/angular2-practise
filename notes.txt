Angular 5



Ch 1

What is it:
JS Framework that allows to create reactive SPAs

Angular Versions:
1 and 2 totally different
2 =~ 4 =~ 5

Setup:
download node.js

E:\setup\repositories\programming\angular2>npm install -g @angular/cli

E:\setup\repositories\programming\angular2>ng new my-first-app

cd my-first-app

ng serve

localhost:4200



01 Getting Started
-------------------

C1
*.ts extensions for typescript

C2
direct response, in js we'd require setting up listeners
-------------------


Contents:

Components: Angular Apps are built from Components
Data Binding

Directives: i.e. ng-model: 2-way data binding
in-built and custom directives

Services & Dependency Injection:
Communication between modules

Routing:
management of different URLs

Observables:
Concept allow to work with Asynchronous code

Forms Handling:

Pipes:
To transform output 

http:

Authentication:

Optimizations:

Deployment:

Animations and Testing:




Installing Bootstrap:
also edit angular-cli.json
npm install --save bootstrap






02 The Basics
-------------------

What happens when visiting that page in browser

Editing the content of app.component.html will be reflected on application homepage but it is not the main page
main page (#SPA) is index.html

Components:
A simple class, a typescript class, so that angular is able to instantiate instantiate

Checkout main.ts, application starts from there

Multiple componenets: So that logic can be replicated from the other one



Creating a component:
Previous example: AppComponent, which was the root component, kinda main one

custom component: server(new sub directory)
nameOfComponent.component.ts
server.component.ts


Angular doesn't have all information it requires, add something which tells angular that this is not a normal typescript class but something special, a component, so Decorator.


Decorators: A typescript feature which allow you to enhance class, elements. ex. @Component (@ sign)


Once you've created new component, register it, inside app.module.ts

Angular uses,
Components: To build webpages
Modules: to bundle different pieces of components into packages


Creating components using CLI & Nesting Components
ng generate component servers
ng g c servers

Nesting components:
Add newly created component inside the parent component or vice versa
Also ensure parent one is registered in the mail app.component.ts file

Check the same in F12


Instead of using external templates for styling we can use inline as well #template instead of #templateUrl



Component Styles:
add bootstrap classes and use em in app.component.html

app.component.css:

alternatively,
remove styleUrls and use styles array
this one will be given priority



Selector component:
It can be either of default one,
	1.  selector: 'app-custom-root',
  		as it is

  	2.	selector: '[app-custom-root]',
  		<div app-custom-root></div>

	3.  selector: 'app-custom-root',
		<div class="app-custom-root"></div>





Data Binding:
Kinda communication between TypeScript Code(Business Logic) of component and html templates(what user sees)

OUTPUT DATA:
Different ways of communcation:
String interpolation: {{data}}
Property Binding: {{[property]="data"}}

REACT TO USER EVENTS:
Event Binding: (event)="expression"


Now, combination of both directions, Two way Data Binding where we are able to react events and output something at same time
Two Way Data Binding: [(ngModel)]="data"


1. String interpolation:
adding class members/methods and reading them inside component files using {{variable/methodName}}

2. Property Binding
Binding native element property to typescript property

Added button in servers.component.html and trying to retrieve value from ts file, it will read value and after 2 seconds will update as well

another way of using property binding, with this commit


Event Binding:
After clicked, sending instructions from html back to ts logic

i.e. Click the button

Passing and Using Data with Event Binding:
Simply on input event pass and fetch data via (<HTMLInputElement>event.target).value;


Ch: 29 Two way data binding
Combination of Event binding and property binding

Directives:
Instructions in the dom, i.e. Components

Built In directives:ng-if, 

Check browser console, whole line of block is not there unless required

additional usecase of default/else

ng-class


adding ngFor


03 Course Project
-------------------

Planning:
	Features - 
		Shopping List
		Receipe Book
	
	Components - 
		Root Component : holding whole application,
		Header : to nevigate between Shopping List and Receipe Book

		Shopping List
		Shopping List Edit
		Receipe List
		Receipe Item
		Receipe Detail

	Model(Data) - 
		Ingredient
		Receipe
--
ng new course

We require basic styling
npm install --save bootstrap

Inform CLI that bootstrap should be included: mention the same in angular-cli.json

added header component and registered it under app component - manually


To generate new component from CLI,
ng generate component cName 

alternatively:  ng g c cName (--spec false)

ng g c recipes --spec false

added recipe-list, recipe-item, recipe-detail | shopping-list, shopping-edit components using CLI

ng g c recipes/recipe-list --spec false
ng g c recipes/recipe-detail --spec false
ng g c recipes/recipe-list/recipe-item --spec false


app
	- recipes
    	- recipe-list
			- recipe-item
	 	- recipe-detail
	- shopping-list
		- shopping-edit

ng g c shopping-list --spec false
ng g c shopping-list/shopping-edit --spec false


Using and linking all created components

Adding navigation bar